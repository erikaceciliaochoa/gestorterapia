/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Vista;

import Controlador.AbstractDAO;
import Modelo.Diagnostico;
import Modelo.Motivo;
import Modelo.Ocupacion;
import Modelo.Prueba;
import Modelo.Tratamiento;
import java.awt.Toolkit;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author usuario
 */
public class dlgOpReportes extends javax.swing.JDialog {
    private int opcion=0;
    private boolean ordId,orNom,asc, desc,todos,algunos;

    /**
     * Creates new form dlgOpReportes
     */
    public dlgOpReportes(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        grupoBotones();
        ordId=orNom=asc=desc=todos=algunos=false;
        SLetras(txtNom);
        SNroEntero(this.txtCant);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGpOrdenar = new javax.swing.ButtonGroup();
        btnGpOrdenarTipo = new javax.swing.ButtonGroup();
        btnGpMostrar = new javax.swing.ButtonGroup();
        panelTipo1 = new javax.swing.JPanel();
        panelMostrar = new javax.swing.JPanel();
        rbtXRegistros = new javax.swing.JRadioButton();
        rbtMostrarTodos = new javax.swing.JRadioButton();
        txtCant = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        verF = new javax.swing.JButton();
        panelTipo = new javax.swing.JPanel();
        rbtAsc = new javax.swing.JRadioButton();
        rbtDesc = new javax.swing.JRadioButton();
        panelOrdenar = new javax.swing.JPanel();
        rbtNro = new javax.swing.JRadioButton();
        rbtNombre = new javax.swing.JRadioButton();
        panelFiltro = new javax.swing.JPanel();
        chkPaciente = new javax.swing.JCheckBox();
        txtNom = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Opciones de Listado");

        panelTipo1.setBackground(java.awt.SystemColor.inactiveCaptionBorder);
        panelTipo1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        panelMostrar.setBackground(java.awt.SystemColor.inactiveCaptionBorder);
        panelMostrar.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Mostrar", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semilight", 0, 24))); // NOI18N

        rbtXRegistros.setBackground(java.awt.SystemColor.inactiveCaptionBorder);
        rbtXRegistros.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rbtXRegistros.setText("Listrar ");
        rbtXRegistros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtXRegistrosActionPerformed(evt);
            }
        });

        rbtMostrarTodos.setBackground(java.awt.SystemColor.inactiveCaptionBorder);
        rbtMostrarTodos.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rbtMostrarTodos.setText("Listar todos.");
        rbtMostrarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtMostrarTodosActionPerformed(evt);
            }
        });

        txtCant.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtCant.setEnabled(false);

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel13.setText("registros.");

        javax.swing.GroupLayout panelMostrarLayout = new javax.swing.GroupLayout(panelMostrar);
        panelMostrar.setLayout(panelMostrarLayout);
        panelMostrarLayout.setHorizontalGroup(
            panelMostrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMostrarLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(rbtXRegistros)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addComponent(rbtMostrarTodos)
                .addGap(49, 49, 49))
        );
        panelMostrarLayout.setVerticalGroup(
            panelMostrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMostrarLayout.createSequentialGroup()
                .addGroup(panelMostrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtXRegistros)
                    .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(rbtMostrarTodos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        verF.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        verF.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/img/Preview.png"))); // NOI18N
        verF.setText("VER");
        verF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verFActionPerformed(evt);
            }
        });

        panelTipo.setBackground(java.awt.SystemColor.inactiveCaptionBorder);
        panelTipo.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Tipo de Ordenamiento", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semilight", 0, 24))); // NOI18N

        rbtAsc.setBackground(java.awt.SystemColor.inactiveCaptionBorder);
        rbtAsc.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rbtAsc.setText("Ascendente");
        rbtAsc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtAscActionPerformed(evt);
            }
        });

        rbtDesc.setBackground(java.awt.SystemColor.inactiveCaptionBorder);
        rbtDesc.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rbtDesc.setText("Descendente");
        rbtDesc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtDescActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTipoLayout = new javax.swing.GroupLayout(panelTipo);
        panelTipo.setLayout(panelTipoLayout);
        panelTipoLayout.setHorizontalGroup(
            panelTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTipoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbtAsc)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbtDesc))
        );
        panelTipoLayout.setVerticalGroup(
            panelTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTipoLayout.createSequentialGroup()
                .addGroup(panelTipoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtAsc)
                    .addComponent(rbtDesc))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        panelOrdenar.setBackground(java.awt.SystemColor.inactiveCaptionBorder);
        panelOrdenar.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Ordenar por", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semilight", 0, 24))); // NOI18N

        rbtNro.setBackground(java.awt.SystemColor.inactiveCaptionBorder);
        rbtNro.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rbtNro.setText("Número");
        rbtNro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtNroActionPerformed(evt);
            }
        });

        rbtNombre.setBackground(java.awt.SystemColor.inactiveCaptionBorder);
        rbtNombre.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        rbtNombre.setText("Descripción");
        rbtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtNombreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelOrdenarLayout = new javax.swing.GroupLayout(panelOrdenar);
        panelOrdenar.setLayout(panelOrdenarLayout);
        panelOrdenarLayout.setHorizontalGroup(
            panelOrdenarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOrdenarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbtNro)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbtNombre)
                .addGap(267, 267, 267))
        );
        panelOrdenarLayout.setVerticalGroup(
            panelOrdenarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelOrdenarLayout.createSequentialGroup()
                .addGroup(panelOrdenarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtNro)
                    .addComponent(rbtNombre))
                .addGap(0, 9, Short.MAX_VALUE))
        );

        panelFiltro.setBackground(java.awt.SystemColor.inactiveCaptionBorder);
        panelFiltro.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true), "Filtro", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI Semilight", 0, 24))); // NOI18N

        chkPaciente.setBackground(java.awt.SystemColor.inactiveCaptionBorder);
        chkPaciente.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        chkPaciente.setText("Descripción");
        chkPaciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPacienteActionPerformed(evt);
            }
        });

        txtNom.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtNom.setEnabled(false);

        javax.swing.GroupLayout panelFiltroLayout = new javax.swing.GroupLayout(panelFiltro);
        panelFiltro.setLayout(panelFiltroLayout);
        panelFiltroLayout.setHorizontalGroup(
            panelFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltroLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(chkPaciente)
                .addGap(18, 18, 18)
                .addComponent(txtNom, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
                .addContainerGap())
        );
        panelFiltroLayout.setVerticalGroup(
            panelFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFiltroLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFiltroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNom, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 0, 36)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/img/note.png"))); // NOI18N
        jLabel1.setText("             LISTADO ");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout panelTipo1Layout = new javax.swing.GroupLayout(panelTipo1);
        panelTipo1.setLayout(panelTipo1Layout);
        panelTipo1Layout.setHorizontalGroup(
            panelTipo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTipo1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTipo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTipo1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(verF, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelTipo1Layout.createSequentialGroup()
                        .addGroup(panelTipo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelTipo1Layout.createSequentialGroup()
                                .addComponent(panelOrdenar, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(panelTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(panelMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        panelTipo1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, panelFiltro, panelMostrar});

        panelTipo1Layout.setVerticalGroup(
            panelTipo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTipo1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelTipo1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelTipo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelOrdenar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(verF, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        panelTipo1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {panelOrdenar, panelTipo});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTipo1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelTipo1, javax.swing.GroupLayout.PREFERRED_SIZE, 443, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void verFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verFActionPerformed

        if(validar()){
            this.dispose();
            informe(); //segun opcion es la tabla que se muestra
        }

    }//GEN-LAST:event_verFActionPerformed

    private void chkPacienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPacienteActionPerformed
        if(this.chkPaciente.isSelected()){
            this.txtNom.setEnabled(true);
        }else{
            this.txtNom.setEnabled(false);
        }
    }//GEN-LAST:event_chkPacienteActionPerformed

    private void rbtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtNombreActionPerformed
        orNom = this.rbtNombre.isSelected();
        ordId = !this.rbtNombre.isSelected();
    }//GEN-LAST:event_rbtNombreActionPerformed

    private void rbtNroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtNroActionPerformed
        ordId = this.rbtNro.isSelected();
        orNom = !this.rbtNro.isSelected();
    }//GEN-LAST:event_rbtNroActionPerformed

    private void rbtAscActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtAscActionPerformed
        asc = this.rbtAsc.isSelected();
        desc = !this.rbtAsc.isSelected();
    }//GEN-LAST:event_rbtAscActionPerformed

    private void rbtDescActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtDescActionPerformed
        desc = this.rbtDesc.isSelected();
        asc = !this.rbtDesc.isSelected();
    }//GEN-LAST:event_rbtDescActionPerformed

    private void rbtMostrarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtMostrarTodosActionPerformed
        todos = this.rbtMostrarTodos.isSelected();
        algunos=!this.rbtMostrarTodos.isSelected();
        txtCant.setEnabled(false);
    }//GEN-LAST:event_rbtMostrarTodosActionPerformed

    private void rbtXRegistrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtXRegistrosActionPerformed
        algunos=rbtXRegistros.isSelected();
        todos = !rbtXRegistros.isSelected();
        if(algunos)
            txtCant.setEnabled(true);
    }//GEN-LAST:event_rbtXRegistrosActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dlgOpReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dlgOpReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dlgOpReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dlgOpReportes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                dlgOpReportes dialog = new dlgOpReportes(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btnGpMostrar;
    private javax.swing.ButtonGroup btnGpOrdenar;
    private javax.swing.ButtonGroup btnGpOrdenarTipo;
    private javax.swing.JCheckBox chkPaciente;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel panelFiltro;
    private javax.swing.JPanel panelMostrar;
    private javax.swing.JPanel panelOrdenar;
    private javax.swing.JPanel panelTipo;
    private javax.swing.JPanel panelTipo1;
    private javax.swing.JRadioButton rbtAsc;
    private javax.swing.JRadioButton rbtDesc;
    private javax.swing.JRadioButton rbtMostrarTodos;
    private javax.swing.JRadioButton rbtNombre;
    private javax.swing.JRadioButton rbtNro;
    private javax.swing.JRadioButton rbtXRegistros;
    private javax.swing.JTextField txtCant;
    private javax.swing.JTextField txtNom;
    private javax.swing.JButton verF;
    // End of variables declaration//GEN-END:variables


private void arranque(){
//    EnableForm(panelFiltro, false);
//    EnableForm(panelFiltro, false);
//    EnableChk(true);
//    this.chooserAnio.setEnabled(false);
//    this.chooserMes.setEnabled(false);
//    this.btnAyuda.setEnabled(true);
}

private void grupoBotones(){
        this.btnGpOrdenar=new ButtonGroup();
        this.btnGpOrdenar.add(this.rbtNro);
        this.btnGpOrdenar.add(this.rbtNombre);
        btnGpOrdenar.clearSelection();
        this.btnGpOrdenarTipo=new ButtonGroup();
        this.btnGpOrdenarTipo.add(this.rbtDesc);
        this.btnGpOrdenarTipo.add(this.rbtAsc);
        btnGpOrdenarTipo.clearSelection();
        btnGpMostrar=new ButtonGroup();
        btnGpMostrar.add(this.rbtMostrarTodos);
        btnGpMostrar.add(this.rbtXRegistros);
        btnGpMostrar.clearSelection();
    }

public void setOpcion(int op){
    opcion=op;
}

public void informe(){
    String tit;
        switch (opcion){
        case 1:
            tit="Ocupaciones/Profesiones.";
            informeOcupacion(tit);
            break;
        case 2:  
            tit="Motivos por los que se inicia Terapia.";
            informeMotivos(tit);
            break;
        case 3:
            tit="Diagnosticos.";
            informeDiagnosticos(tit);
            break;
        case 4:
            tit="Pruebas.";
            informePruebas(tit);
            break;
        case 5:   
            tit="Tratamientos.";
            informeTratamientos(tit);
            break;   
        default:
//            tit="Nada";
            break;
    }  
}

public void informeOcupacion(String tit){
    try {
        //getListaEntidades: Lista todo con ordenamiento ASC x el 1er campo (id)
        //getListaEntidadesByDesc: Lista todo con ordenamiento DESC x el 1er campo (id)
        //getListaEntidadesXnom: SEGUN nom contenga Lista todo con ordenamiento ASC x el 1er campo (id)
        //getListaEntidadesXnomByDesc: SEGUN nom contenga Lista todo con ordenamiento DESC x el 1er campo (id)
//        List<Ocupacion> lista = AbstractDAO.getListaEntidades(Ocupacion.class); 
        List<Ocupacion> lista;
        int c, campo; String nom, ord;
        campo=1; ord="ASC";
        if(!txtCant.getText().isEmpty()){
            c=Integer.parseInt(txtCant.getText());
        }else c=cantRegOcupacion();
        if(!txtNom.getText().isEmpty()){
            nom=txtNom.getText();
        }else nom="";       
        
        if((ordId && asc && todos) || (ordId && asc && algunos)){campo=1; ord="ASC";}
        if((ordId && desc && todos) || (ordId && desc && algunos)){campo=1; ord="DESC";}
        if((orNom && desc && todos) || (orNom && desc && algunos)){campo=2; ord="DESC";}
        if((orNom && asc && todos) || (orNom && asc && algunos)) {campo=2; ord="ASC";}
        
        lista=AbstractDAO.getReporte(Ocupacion.class, nom, campo, ord, c);
            
        if(!lista.isEmpty()){
            JasperReport report  = (JasperReport)JRLoader.loadObject(ClassLoader.getSystemResource("Reportes/Reporte.jasper")); 
            Map parametro= new HashMap();
            parametro.put("titulo", tit);
            JasperPrint fillReport = JasperFillManager.fillReport(report, parametro, new JRBeanCollectionDataSource(lista));
            if(!fillReport.getPages().isEmpty()){
                JasperViewer jviewer = new JasperViewer(fillReport,false);        
                jviewer.setTitle("Lista de " + tit);
                jviewer.setVisible(true);
            }else JOptionPane.showMessageDialog(this, "<html><font size=5>No hay información suficiente para generar el documento.");
        }else{
            JOptionPane.showMessageDialog(this, "<html><font size=5>No hay información suficiente para generar el documento.");
        } 
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "<html><font size=5 style=color:red;>Error cargando reporte.");
    }
}

public int cantRegOcupacion(){
        int num = 0;
        List<Ocupacion> lista = AbstractDAO.getListaEntidades(Ocupacion.class);
        for (Iterator<Ocupacion> it = lista.iterator(); it.hasNext();) {
            Ocupacion t = it.next();
            num = num + 1;
        }
        if(num==0){
            num=1;
        }
        return num;
    }



public void informeMotivos(String tit){
    try {
        List<Motivo> lista=null;
        int c, campo; String nom, ord;
        campo=1; ord="ASC";
        if(!txtCant.getText().isEmpty()){
            c=Integer.parseInt(txtCant.getText());
        }else c=cantRegMot();
        if(!txtNom.getText().isEmpty()){
            nom=txtNom.getText();
        }else nom="";       
        
        if((ordId && asc && todos) || (ordId && asc && algunos)){campo=1; ord="ASC";}
        if((ordId && desc && todos) || (ordId && desc && algunos)){campo=1; ord="DESC";}
        if((orNom && desc && todos) || (orNom && desc && algunos)){campo=2; ord="DESC";}
        if((orNom && asc && todos) || (orNom && asc && algunos)) {campo=2; ord="ASC";}
        
        lista=AbstractDAO.getReporte(Motivo.class, nom, campo, ord, c);
        
        if(lista!=null){
            JasperReport report  = (JasperReport)JRLoader.loadObject(ClassLoader.getSystemResource("Reportes/Reporte.jasper")); 
            Map parametro= new HashMap();
            parametro.put("titulo", tit);
            JasperPrint fillReport = JasperFillManager.fillReport(report, parametro, new JRBeanCollectionDataSource(lista));
            if(!fillReport.getPages().isEmpty()){
                JasperViewer jviewer = new JasperViewer(fillReport,false);        
                jviewer.setTitle("Lista de " + tit);
                jviewer.setVisible(true);
            }else JOptionPane.showMessageDialog(this, "<html><font size=5>No hay información suficiente para generar el documento.");
        }else{
            JOptionPane.showMessageDialog(this, "<html><font size=5>No hay información suficiente para generar el documento.");
        }           
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "<html><font size=5 style=color:red;>Error cargando reporte.");
    }
}

public int cantRegMot(){
        int num = 0;
        List<Motivo> lista = AbstractDAO.getListaEntidades(Motivo.class);
        for (Iterator<Motivo> it = lista.iterator(); it.hasNext();) {
            Motivo t = it.next();
            num = num + 1;
        }
        if(num==0){
            num=1;
        }
        return num;
    }

public int cantRegDiag(){
        int num = 0;
        List<Diagnostico> lista = AbstractDAO.getListaEntidades(Diagnostico.class);
        for (Iterator<Diagnostico> it = lista.iterator(); it.hasNext();) {
            Diagnostico t = it.next();
            num = num + 1;
        }
        if(num==0){ num=1; }
        return num;
    }

public void informeDiagnosticos(String tit){
    try {
//        List<Diagnostico> lista = AbstractDAO.getListaEntidades(Diagnostico.class); 
        List<Diagnostico> lista=null;
        int c, campo; String nom, ord;
        campo=1; ord="ASC";
        if(!txtCant.getText().isEmpty()){
            c=Integer.parseInt(txtCant.getText());
        }else c=cantRegDiag();
        if(!txtNom.getText().isEmpty()){
            nom=txtNom.getText();
        }else nom="";       
        
        if((ordId && asc && todos) || (ordId && asc && algunos)){campo=1; ord="ASC";}
        if((ordId && desc && todos) || (ordId && desc && algunos)){campo=1; ord="DESC";}
        if((orNom && desc && todos) || (orNom && desc && algunos)){campo=2; ord="DESC";}
        if((orNom && asc && todos) || (orNom && asc && algunos)) {campo=2; ord="ASC";}
        
        lista=AbstractDAO.getReporte(Diagnostico.class, nom, campo, ord, c);
        
        if(lista!=null){
            JasperReport report  = (JasperReport)JRLoader.loadObject(ClassLoader.getSystemResource("Reportes/Reporte.jasper")); 
            Map parametro= new HashMap();
            parametro.put("titulo", tit);
            JasperPrint fillReport = JasperFillManager.fillReport(report, parametro,new JRBeanCollectionDataSource(lista));
            if(!fillReport.getPages().isEmpty()){
                JasperViewer jviewer = new JasperViewer(fillReport,false);        
                jviewer.setTitle("Lista de " + tit);
                jviewer.setVisible(true);
            }else JOptionPane.showMessageDialog(this, "<html><font size=5>No hay información suficiente para generar el documento.");
        }else{
            JOptionPane.showMessageDialog(this, "<html><font size=5>No hay información suficiente para generar el documento.");
        } 
               
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "<html><font size=5 style=color:red;>Error cargando reporte.");
    }
}

public int cantRegPru(){
        int num = 0;
        List<Prueba> lista = AbstractDAO.getListaEntidades(Prueba.class);
        for (Iterator<Prueba> it = lista.iterator(); it.hasNext();) {
            Prueba t = it.next();
            num = num + 1;
        }
        if(num==0){ num=1; }
        return num;
    }

public void informePruebas(String tit){
    try {
//        List<Prueba> lista = AbstractDAO.getListaEntidades(Prueba.class); 
        
        List<Prueba> lista;
        int c, campo; String nom, ord;
        campo=1; ord="ASC";
        if(!txtCant.getText().isEmpty()){
            c=Integer.parseInt(txtCant.getText());
        }else c=cantRegPru();
        if(!txtNom.getText().isEmpty()){
            nom=txtNom.getText();
        }else nom="";       
        
        if((ordId && asc && todos) || (ordId && asc && algunos)){campo=1; ord="ASC";}
        if((ordId && desc && todos) || (ordId && desc && algunos)){campo=1; ord="DESC";}
        if((orNom && desc && todos) || (orNom && desc && algunos)){campo=2; ord="DESC";}
        if((orNom && asc && todos) || (orNom && asc && algunos)) {campo=2; ord="ASC";}
        
        lista=AbstractDAO.getReporte(Prueba.class, nom, campo, ord, c);

        if(!lista.isEmpty()){
            JasperReport report  = (JasperReport)JRLoader.loadObject(ClassLoader.getSystemResource("Reportes/Reporte.jasper")); 
            Map parametro= new HashMap();
            parametro.put("titulo", tit);
            JasperPrint fillReport = JasperFillManager.fillReport(report, parametro,new JRBeanCollectionDataSource(lista));
            if(!fillReport.getPages().isEmpty()){
                JasperViewer jviewer = new JasperViewer(fillReport,false);        
                jviewer.setTitle("Lista de " + tit);
                jviewer.setVisible(true);
            }else JOptionPane.showMessageDialog(this, "<html><font size=5;>No hay información suficiente para generar el documento.");
        }else{
            JOptionPane.showMessageDialog(this, "<html><font size=5>No hay información suficiente para generar el documento.");
        }        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "<html><font size=5 style=color:red;>Error cargando reporte.");
    }
}

public int cantRegTra(){
        int num = 0;
        List<Tratamiento> lista = AbstractDAO.getListaEntidades(Tratamiento.class);
        for (Iterator<Tratamiento> it = lista.iterator(); it.hasNext();) {
            Tratamiento t = it.next();
            num = num + 1;
        }
        if(num==0){ num=1; }
        return num;
    }

public void informeTratamientos(String tit){
    try {
//        List<Tratamiento> lista = AbstractDAO.getListaEntidades(Tratamiento.class); 
        List<Tratamiento> lista;
        int c, campo; String nom, ord;
        campo=1; ord="ASC";
        if(!txtCant.getText().isEmpty()){
            c=Integer.parseInt(txtCant.getText());
        }else c=cantRegTra();
        if(!txtNom.getText().isEmpty()){
            nom=txtNom.getText();
        }else nom="";       
        
        if((ordId && asc && todos) || (ordId && asc && algunos)){campo=1; ord="ASC";}
        if((ordId && desc && todos) || (ordId && desc && algunos)){campo=1; ord="DESC";}
        if((orNom && desc && todos) || (orNom && desc && algunos)){campo=2; ord="DESC";}
        if((orNom && asc && todos) || (orNom && asc && algunos)) {campo=2; ord="ASC";}
        
        lista=AbstractDAO.getReporte(Tratamiento.class, nom, campo, ord, c);
        
        if(!lista.isEmpty()){
            JasperReport report  = (JasperReport)JRLoader.loadObject(ClassLoader.getSystemResource("Reportes/Reporte.jasper")); 
            Map parametro= new HashMap();
            parametro.put("titulo", tit);
            JasperPrint fillReport = JasperFillManager.fillReport(report, parametro,new JRBeanCollectionDataSource(lista));
            if(!fillReport.getPages().isEmpty()){
                JasperViewer jviewer = new JasperViewer(fillReport,false);        
                jviewer.setTitle("Lista de " + tit + ".");
                jviewer.setVisible(true);
            }else JOptionPane.showMessageDialog(this, "<html><font size=5>No hay información suficiente para generar el documento.");
        }else{
            JOptionPane.showMessageDialog(this, "<html><font size=5>No hay información suficiente para generar el documento.");
        }        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "<html><font size=5 style=color:red;>Error cargando reporte.");
    }
}

public boolean validar(){
    String tit="Atención"; String msj; 
    boolean res=true;
    
    if(this.chkPaciente.isSelected() && (txtNom.getText().trim()).length()==0){
      msj="<html><font size=5 style=color:red;>Nombre a buscar. Dato Requerido.";
      JOptionPane.showMessageDialog(this, msj,tit,JOptionPane.WARNING_MESSAGE);
      txtNom.grabFocus();
      return false;
    }  
    if(!this.rbtNro.isSelected() && !this.rbtNombre.isSelected()){
      msj="<html><font size=5 style=color:red;>Ordenar por.. Dato Requerido.";
      JOptionPane.showMessageDialog(this, msj,tit,JOptionPane.WARNING_MESSAGE);
      rbtNro.grabFocus();
      return false;
    }
    if(!this.rbtAsc.isSelected() && !this.rbtDesc.isSelected()){
      msj="<html><font size=5 style=color:red;>Tipo de Ordenenamiento.. Dato Requerido.";
      JOptionPane.showMessageDialog(this, msj,tit,JOptionPane.WARNING_MESSAGE);
      rbtAsc.grabFocus();
      return false;
    }
    if(!this.rbtXRegistros.isSelected() && !this.rbtMostrarTodos.isSelected()){
      msj="<html><font size=5 style=color:red;>Opción de muestra. Dato Requerido.";
      JOptionPane.showMessageDialog(this, msj,tit,JOptionPane.WARNING_MESSAGE);
      rbtXRegistros.grabFocus();
      return false;
    }
    if(this.rbtXRegistros.isSelected() && (txtCant.getText().trim()).length()==0){
      msj="<html><font size=5 style=color:red;>Cant de registros a mostrar. Dato Requerido.";
      JOptionPane.showMessageDialog(this, msj,tit,JOptionPane.WARNING_MESSAGE);
      txtCant.grabFocus();
      return false;
    }
    
    return res;
}

private void SLetras(JTextField a){
    a.addKeyListener(new KeyAdapter() {
   @Override public void keyTyped(KeyEvent e) {            
        char car = e.getKeyChar();       
        if((car<'a' || car>'z') && (car<'A' || car>'Z')            
            && car !='á'          
            && car !='é'           
            && car !='í'           
            && car !='ó'          
            && car !='ú'  
            && car !='Á'           
            && car !='É'           
            && car !='Í'           
            && car !='Ó'
            && car !='Ú'
            && car !='ñ'
            && car !='Ñ'    
            && (car!=(char)KeyEvent.VK_SPACE)
            && (car!=(char)KeyEvent.VK_BACK_SPACE))
        {
          Toolkit.getDefaultToolkit().beep();
          e.setKeyChar((char) KeyEvent.VK_CLEAR);
                JOptionPane.showMessageDialog(null, "<html><font size=5 style=color:red;>Solo puede ingresar letras", "Validando Datos",
                        JOptionPane.ERROR_MESSAGE);
          e.consume(); 
        }
        String text = ((JTextField) e.getSource()).getText();
        if (text.length() >= 50) {
            e.setKeyChar((char) KeyEvent.VK_CLEAR);
            JOptionPane.showMessageDialog(null, "<html><font size=5 style=color:red;>Ha excedido el número máximo de caracteres!!! (50)", "Validando Datos",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
    });          
}
    
private void SNroEntero(JTextField a){   
    a.addKeyListener(new KeyAdapter() {
   @Override public void keyTyped(KeyEvent e) {            
            String text = ((JTextField) e.getSource()).getText();

            if(!Character.isDigit(e.getKeyChar()) && !Character.isISOControl(e.getKeyChar()))
            {
                 Toolkit.getDefaultToolkit().beep();

                 e.setKeyChar((char) KeyEvent.VK_CLEAR);
                JOptionPane.showMessageDialog(null, "<html><font size=5 style=color:red;>Solo puede ingresar números", "Validando Datos",
                        JOptionPane.ERROR_MESSAGE);
                e.consume();
            }
            if (text.length() >= 5) {
                e.setKeyChar((char) KeyEvent.VK_CLEAR);
                JOptionPane.showMessageDialog(null, "<html><font size=5 style=color:red;>Ha excedido el numero maximo de caracteres!!! (5)", "Validando Datos",
                        JOptionPane.ERROR_MESSAGE);
            }                     
    }
    });  
}






}
